{% block body_container_header %}
    <style type='text/css'>
        html, body, #container {
            width: 100%;
            margin: 0;
            padding: 0;
            position: relative;
        }
        h2 {
            margin: 0;
            padding: 0;
            height: 5%;
            min-height: 30px;
        }
        
        #infoBoxes {
            position: relative;
            width: 100%;
            height: 30%;
            min-height: 180px;
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        
        #infoBoxes > div {
            float: left;
            position: relative;
            height: 100%;
            width: 18%;
            margin: 0;
            padding-right: 1%;
            padding-left: 1%;
        }
        
        #infoBoxes > #box_1 {
            background-color: #F1E3FF;
        }
        #infoBoxes > #box_2 {
            background-color: #E3F1FF;
        }
        #infoBoxes > #box_3 {
            background-color: #ECFFE3;
        }
        #infoBoxes > #box_4 {
            background-color: #FFF4E3;
        }
        #infoBoxes > #box_5 {
            background-color: #FFE3E3;
        }
        
        #scrollingOutput {
            position: relative;
            width: 96%;
            
            height: 50%;
            overflow-y: scroll;
            
            margin: 0;
            margin-top: 20px;
            padding-left: 2%;
            padding-right: 2%;
            background-color: #F7F7F7;
        }
        
        #scrollingErrorOutput {
            position: relative;
            width: 100%;

            height: 60%;
            overflow-y: scroll;
            
            margin: 0;
            background-color: #F7F7F7;
        }
        
        div#bottomSpacer {
            height: 30px;
        }
        div#bottomErrorSpacer {
            height: 10px;
        }
        
        pre {
            margin: 0;
            padding: 0;
        }
        
        #pidOfOutput {
            margin-top: 10px;
        }

        #updateStatus {
            height: 50px;
        }
        
        #systemLoadAverage {
            margin-bottom: 10px;
        }
        
        #loadingSpinner {
            margin: 0 auto;
            height: 50px;
            width: 50px;
        }
    </style>
    <h2>Parallel Technology Test Run</h2>
{% endblock %}
{% block body_container_main %}
{% if debugMessage %}
    <div id="debug">
        <pre>
            {{ debugMessage }}
        </pre>
    </div>
{% endif %}
<div id="infoBoxes">
    <div id="box_1">
        <h3>System</h3>
        Load Average: 
        <pre id="systemLoadAverage"></pre>
        Highest Load Processes:
        <pre id="top5CPUProcesses"></pre>
    </div>
    <div id="box_2">
        <h3>Test</h3>
        <div id="testInfo"></div>
        <div id="testStatus"></div>
        <pre id="pidOfOutput"></pre>
    </div>
    <div id="box_3">
        <h3>Queue</h3>
        <div id="queueInfo"></div>
        <div id="queueSpeed"></div>
    </div>
    <div id="box_4">
        <h3>Run State</h3>
        <div id="updateStatus">Stopped</div>
        <button id="startButton">Start</button>
        <button id="stopButton">Stop</button>
    </div>
    <div id="box_5">
        <h3>Errors</h3>
        <div id="scrollingErrorOutput"></div>
    </div>
</div><div id="scrollingOutput"></div>
{% endblock %}
{% block body_js %}
	<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
	<script type="text/javascript">
		$(document).ready(function(){
            var queueLengthStart = {{ queueLength }};
            var queueCompleted = 0;
            var queueRemaining = 0;
            var mostRecentMessage = '';
            var mostRecentError = '';
            var stopRunning = false;

            var speedTimer;
            var speedTimerTestCount = 0;
            var testsPerMinute = 0;

            $( "#startButton" ).click(function() {
                stopRunning = false;
                speedTimer = setInterval(function() {
                    testsPerMinute = 2 * speedTimerTestCount;
                    var currentTime = new Date();
                    var estimatedMinutesRemaining = queueRemaining / testsPerMinute;
                    var estimateCompletionDate = new Date(currentTime.getTime() + estimatedMinutesRemaining*60000);
                    var estimateCompletionDateString = ('0' + estimateCompletionDate.getHours()).slice(-2) + ":" + ('0' + estimateCompletionDate.getMinutes()).slice(-2) + ":" + ('0' + estimateCompletionDate.getSeconds()).slice(-2);
                    
                    $('#queueSpeed').html('Average Speed: '+testsPerMinute+' tests / minute<br />Estimated Completion: '+estimateCompletionDateString);
                    speedTimerTestCount = 0;
                }, 30000);
                update();
            });
            $( "#stopButton" ).click(function() {
                stopRunning = true;
                clearInterval(speedTimer);
                speedTimerTestCount = 0;
                $('#updateStatus').html('Stopped');
            });
            
			function update() {
                if(stopRunning == true) {
                    console.log("Cancelling update because stopRunning is true");
                    return;
                }
                
                function logError(errorMessage) {
                    var date = new Date();

                    // Something went wrong. Hopefully it will be fixed in 5 seconds
                    var dateString = '['+('0' + date.getHours()).slice(-2) + ":" + ('0' + date.getMinutes()).slice(-2) + ":" + ('0' + date.getSeconds()).slice(-2)+'] ';
                    
                    // Add message to scroller if isn't identical to whatever is already there
                    if(errorMessage != mostRecentError) {
                        mostRecentError = errorMessage;
                        $('#bottomErrorSpacer').remove();
                        var scrollingErrorOutput = $('#scrollingErrorOutput');
                        scrollingErrorOutput.append( "<pre>"+ dateString + mostRecentError +"</pre><div id='bottomErrorSpacer'></div>" )
                                .scrollTop(scrollingErrorOutput.prop("scrollHeight"));
                    }
                }
                
                function logProgramOutput(outputMessage) {
                    var date = new Date();

                    // Something went wrong. Hopefully it will be fixed in 5 seconds
                    var dateString = '['+('0' + date.getHours()).slice(-2) + ":" + ('0' + date.getMinutes()).slice(-2) + ":" + ('0' + date.getSeconds()).slice(-2)+'] ';
                    
                    // Add message to scroller if isn't identical to whatever is already there
                    if(outputMessage != mostRecentMessage) {
                        mostRecentMessage = outputMessage;
                        $('#bottomSpacer').remove();
                        var scrollingOutput = $('#scrollingOutput');
                        scrollingOutput.append( "<pre>"+ dateString + mostRecentMessage +"</pre><div id='bottomSpacer'></div>" )
                                .scrollTop(scrollingOutput.prop("scrollHeight"));
                    }
                }
                
                $.ajax( {
                    type: 'GET',
                    url: 'update',
                    dataType: 'json',
                    beforeSend: function() {
                        // Show loading spinner for the split second while we do update the results with ajax
                        $('#updateStatus').html('<img src="http://www.southwestholidays.co.uk/images/ajax-loader.gif" id="loadingSpinner" />');
                    } ,
                    success: function(result){
                        // Hide ajax loading spinner so we know we're between updates
                        $('#updateStatus').html('');
                
                        $('#systemLoadAverage').text(result.loadAverage[0]+' '+result.loadAverage[1]+' '+result.loadAverage[2]);
                        $('#top5CPUProcesses').text(result.top5CPUProcesses);
                        
                        queueCompleted = queueLengthStart - result.queueLength;
                        queueRemaining = queueLengthStart - queueCompleted;
                        $('#queueInfo').html('Queue is '+result.queueStatus+'.<br /><br />' +
                                'Completed: '+queueCompleted+' out of ' + queueLengthStart);
                        
                        if (result.queueStatus == 'running') {
                            // result.testStatus possible values: 'systemNotReady', 'prepareTestFailed', 'startTestFailed', 'started', 'running', 'finished'
                            if (result.testStatus == 'systemNotReady') {
                                logError(result.message);
                                $('#updateStatus').html('Waiting for system');
                                setTimeout(function() { update(); }, 2000);
                                
                            } else if (result.testStatus == 'prepareTestFailed') {
                                logError(result.message);
                                setTimeout(function() { update(); }, 2000);
                                
                            } else if (result.testStatus == 'startTestFailed') {
                                logError(result.message);
                                setTimeout(function() { update(); }, 2000);
                                
                            } else if (result.testStatus == 'started') {
                                // New test just started, update the test status box
                                $('#testStatus').text("State: Started");
                                // Add other useful info about test
                                $('#testInfo').html('ID: '+result.testID+'<br />Type: '+result.testType+'<br />Threads: '+result.testThreads);
                                
                                // Otherwise delay 200ms between polls so we don't affect the results by generating apache load
                                setTimeout(function() { update(); }, 500);
                                
                            } else if (result.testStatus == 'running') {
                                // New test just started, update the test status box
                                $('#testStatus').text("State: Running");
                                // Show output from pidof in test box
                                $('#pidOfOutput').text(result.message);
                                
                                // Otherwise delay 200ms between polls so we don't affect the results by generating apache load
                                setTimeout(function() { update(); }, 500);
                                
                            } else if (result.testStatus == 'finished') {
                                // Clear pidof
                                $('#pidOfOutput').text("");
                                // Set visual test status
                                $('#testStatus').text("State: Finished");
                                // Increment test counter
                                speedTimerTestCount++;
                                // Log program output to screen
                                logProgramOutput(result.message);

                                // Since no test is running because we just finished one, update immediately to keep things quick
                                update();
                            }
                        } else {
                            // Otherwise delay 5 seconds between polls. If queue isn't running we have probably either finished or errored
                            setTimeout(function() { update(); }, 5000);
                        }
                        
                    },
                    error: function(xhr, ajaxOptions, thrownError){
                        // Something went wrong. Hopefully it will be fixed in 5 seconds
                        logError(thrownError);
                        setTimeout(function() { update(); }, 5000);
                    }
	    	   });
			}
		});
	</script>
{% endblock %}