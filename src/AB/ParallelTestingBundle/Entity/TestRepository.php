<?php

namespace AB\ParallelTestingBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TestRepository extends EntityRepository
{

	public function findMeanResults($type, $cores)
    {
		return $this->getEntityManager()
			->createQueryBuilder()
			->select('t.type, t.upperLimit, 
						AVG(t.clockRunTime) AS averageTime,
						AVG(t.systemRunTime) AS averageSystemTime,  
						AVG(t.cpuPercent) AS averageCPU')
			->from('ABParallelTestingBundle:Test', 't')
			->where('t.type = :type')
			->andwhere('t.cores = :cores')
			->setParameter('type', $type)
			->setParameter('cores', $cores)
			->groupBy('t.type, t.upperLimit')
			->getQuery()
			->getResult();
    }

    public function findMedianResults($type, $cores)
    {
        $resultsArray = array();

        foreach($this->findUpperLimits($type,$cores) as $upperLimit) {
            $clockRunTimes = array();
            $systemRunTimes = array();
            $cpuPercents = array();

            $resultsToAverage = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('t.clockRunTime, t.systemRunTime, t.cpuPercent')
                ->from('ABParallelTestingBundle:Test', 't')
                ->where('t.type = :type')
                ->andwhere('t.cores = :cores')
                ->andwhere('t.upperLimit = :upperLimit')
                ->setParameter('type', $type)
                ->setParameter('cores', $cores)
                ->setParameter('upperLimit', $upperLimit)
                ->getQuery()
                ->getResult();
            
            foreach($resultsToAverage as $resultArray) {
                $clockRunTimes[] = $resultArray['clockRunTime'];
                $systemRunTimes[] = $resultArray['systemRunTime'];
                $cpuPercents[] = $resultArray['cpuPercent'];
            }
            
            $resultCount = count($clockRunTimes);
            $mid = $resultCount > 1 ? (int)($resultCount / 2) : 0;
            
            rsort($clockRunTimes);
            $clockRunTimeMedian = (($mid % 2 != 0) OR $mid == 0) ? $clockRunTimes[$mid] : (($clockRunTimes[$mid-1]) + $clockRunTimes[$mid]) / 2;

            rsort($systemRunTimes);
            $systemRunTimeMedian = (($mid % 2 != 0) OR $mid == 0) ? $systemRunTimes[$mid] : (($systemRunTimes[$mid-1]) + $systemRunTimes[$mid]) / 2;

            rsort($cpuPercents);
            $cpuPercentMedian = (($mid % 2 != 0) OR $mid == 0) ? $cpuPercents[$mid] : (($cpuPercents[$mid-1]) + $cpuPercents[$mid]) / 2;

            $resultsArray[] = array (
                'type' => $type,
                'cores' => $cores,
                'upperLimit' => $upperLimit,
                'clockRunTimeMedian' => $clockRunTimeMedian,
                'systemRunTimeMedian' => $systemRunTimeMedian,
                'cpuPercentMedian' => $cpuPercentMedian,
            );
        } 
        
        return $resultsArray;
    }

    public function findUpperLimits($type, $cores)
    {
        $results = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('t.upperLimit')
            ->distinct(true)
            ->from('ABParallelTestingBundle:Test', 't')
            ->where('t.type = :type')
            ->andwhere('t.cores = :cores')
            ->setParameter('type', $type)
            ->setParameter('cores', $cores)
            ->orderBy('t.upperLimit')
            ->getQuery()
            ->getResult();

        $upperLimits = array();
        foreach($results as $result) {
            $upperLimits[] = $result['upperLimit'];
        }
        return $upperLimits;
    }

}
